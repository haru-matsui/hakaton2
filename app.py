from flask import Flask, render_template, request, jsonify, session, redirect, url_for
from apscheduler.schedulers.background import BackgroundScheduler
import json
import os
from datetime import datetime
from functools import wraps

app = Flask(__name__)
app.secret_key = 'hackathon_secret_key_2025'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
all_schedules = {}
groups_list = []

def load_all_schedules():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø"""
    global all_schedules, groups_list
    try:
        if os.path.exists('all_schedules.json'):
            with open('all_schedules.json', 'r', encoding='utf-8') as f:
                all_schedules = json.load(f)
            groups_list = list(all_schedules.keys())
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {len(all_schedules)} –≥—Ä—É–ø–ø")
            print(f"üìã –ì—Ä—É–ø–ø—ã: {', '.join(groups_list)}")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª all_schedules.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üí° –ó–∞–ø—É—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞: python parser.py")
            all_schedules = {}
            groups_list = []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
        all_schedules = {}
        groups_list = []

def load_json_data(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    filepath = os.path.join('static', 'data', filename)
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def login_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# ==================== –ú–ê–†–®–†–£–¢–´ ====================

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    if 'user_id' in session:
        if session.get('role') == 'student':
            return redirect(url_for('student_dashboard'))
        else:
            return redirect(url_for('teacher_dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    if request.method == 'POST':
        login_input = request.form.get('login')
        password = request.form.get('password')
        
        users_data = load_json_data('users.json')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        for student in users_data.get('students', []):
            if student['login'] == login_input and student['password'] == password:
                session['user_id'] = student['id']
                session['username'] = student['name']
                session['role'] = 'student'
                session['group'] = student['group']
                return redirect(url_for('student_dashboard'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        for teacher in users_data.get('teachers', []):
            if teacher['login'] == login_input and teacher['password'] == password:
                session['user_id'] = teacher['id']
                session['username'] = teacher['name']
                session['role'] = 'teacher'
                session['subject'] = teacher['subject']
                return redirect(url_for('teacher_dashboard'))
        
        return render_template('login.html', error='–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    session.clear()
    return redirect(url_for('login'))

# ==================== –°–¢–£–î–ï–ù–¢ ====================

@app.route('/student/dashboard')
@login_required
def student_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    if session.get('role') != 'student':
        return redirect(url_for('teacher_dashboard'))
    
    return render_template('student_dashboard.html')

@app.route('/student/schedule')
@login_required
def schedule():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if session.get('role') != 'student':
        return redirect(url_for('index'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞
    current_group = session.get('group', '–¢–û–ü-103–ë')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
    schedule_data = all_schedules.get(current_group, {})
    
    return render_template('schedule.html', 
                         schedule=schedule_data,
                         groups=groups_list,
                         current_group=current_group)

@app.route('/student/materials')
@login_required
def materials():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    if session.get('role') != 'student':
        return redirect(url_for('index'))
    
    materials_data = load_json_data('materials.json')
    return render_template('materials.html', materials=materials_data.get('materials', []))

@app.route('/student/ipr')
@login_required
def ipr():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ò–ü–†"""
    if session.get('role') != 'student':
        return redirect(url_for('index'))
    
    ipr_data = load_json_data('ipr.json')
    user_ipr = None
    
    for student_ipr in ipr_data.get('students', []):
        if student_ipr['student_id'] == session.get('user_id'):
            user_ipr = student_ipr
            break
    
    return render_template('ipr.html', ipr=user_ipr)

@app.route('/student/feedback', methods=['GET', 'POST'])
@login_required
def feedback():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    if session.get('role') != 'student':
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        return render_template('feedback.html', success=True)
    
    teachers_data = load_json_data('users.json')
    return render_template('feedback.html', teachers=teachers_data.get('teachers', []))

# ==================== –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ ====================

@app.route('/teacher/dashboard')
@login_required
def teacher_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if session.get('role') != 'teacher':
        return redirect(url_for('student_dashboard'))
    
    return render_template('teacher_dashboard.html')

@app.route('/teacher/grades')
@login_required
def grades():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏"""
    if session.get('role') != 'teacher':
        return redirect(url_for('index'))
    
    grades_data = load_json_data('grades.json')
    return render_template('grades.html', students=grades_data.get('students', []))

# ==================== API ====================

@app.route('/api/schedule/<group_name>')
def api_schedule(group_name):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    schedule_data = all_schedules.get(group_name, {})
    return jsonify(schedule_data)

@app.route('/api/schedule/<group_name>/week/<int:week_number>')
def api_week(group_name, week_number):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏ –≥—Ä—É–ø–ø—ã"""
    schedule_data = all_schedules.get(group_name, {})
    week_data = schedule_data.get('–Ω–µ–¥–µ–ª–∏', {}).get(str(week_number), {})
    return jsonify({
        '–≥—Ä—É–ø–ø–∞': group_name,
        '–Ω–µ–¥–µ–ª—è': week_number,
        '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ': week_data
    })

@app.route('/api/groups')
def api_groups():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
    return jsonify(groups_list)

if __name__ == '__main__':
    load_all_schedules()
    
    print("\n" + "="*70)
    print("üéì –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ –°–¢–£–î–ï–ù–¢–ê - –•–ê–ö–ê–¢–û–ù 2025")
    print("="*70)
    print(f"üåê –°–∞–π—Ç:         http://127.0.0.1:5000/")
    print(f"üîë –°—Ç—É–¥–µ–Ω—Ç:      student1 / password")
    print(f"üîë –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: teacher1 / password")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups_list)}")
    if groups_list:
        print(f"üìã –ì—Ä—É–ø–ø—ã: {', '.join(groups_list)}")
    print("="*70 + "\n")
    
    app.run(debug=True, use_reloader=False)