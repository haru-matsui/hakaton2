import requests
from bs4 import BeautifulSoup
import json
import re
from datetime import datetime
from collections import OrderedDict

class ScheduleParser:
    def __init__(self):
        self.base_url = "https://isu.uust.ru/module/schedule/schedule_2024_script.php"
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:144.0) Gecko/20100101 Firefox/144.0',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'X-Requested-With': 'XMLHttpRequest',
        }
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
        self.time_slots = {
            '1': '08:00-09:20',
            '2': '09:35-10:55',
            '3': '11:35-12:55',
            '4': '13:10-14:30',
            '5': '15:10-16:30',
            '6': '16:45-18:05',
            '7': '18:20-19:40',
            '8': '19:55-21:15',
            '9': '21:25-22:45'
        }
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï
        self.weekdays = {
            '1': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            '2': '–í—Ç–æ—Ä–Ω–∏–∫',
            '3': '–°—Ä–µ–¥–∞',
            '4': '–ß–µ—Ç–≤–µ—Ä–≥',
            '5': '–ü—è—Ç–Ω–∏—Ü–∞',
            '6': '–°—É–±–±–æ—Ç–∞'
        }
        
        # –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.weekdays_order = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    
    def extract_dates_from_html(self, html_content):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ HTML (–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã)"""
        dates = {}
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∏–ø–∞: <th>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (20.10.2025)</th>
        date_pattern = r'<th[^>]*>(–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞|–°—É–±–±–æ—Ç–∞)\s*\((\d{2}\.\d{2}\.\d{4})\)'
        matches = re.findall(date_pattern, html_content)
        
        for day_name, date_str in matches:
            dates[day_name] = date_str
        
        return dates
    
    def parse_week(self, group_id, week_number):
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏"""
        print(f"üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–µ–ª–∏ {week_number} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}...")
        
        data = {
            'week': str(week_number),
            'group_id': str(group_id),
            'funct': 'group',
            'show_temp': '0'
        }
        
        try:
            response = requests.post(self.base_url, data=data, headers=self.headers, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º HTML –∏ JavaScript
            html_content = response.text
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ HTML
            dates = self.extract_dates_from_html(html_content)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JavaScript –≤—Å—Ç–∞–≤–∫–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            schedule_scripts = re.findall(r"\$\('#(\d+_\d+_group)'\)\.append\('(.+?)'\);", html_content)
            
            # –í–ê–ñ–ù–û! –ò—Å–ø–æ–ª—å–∑—É–µ–º OrderedDict —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
            week_schedule = OrderedDict()
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï
            for day_name in self.weekdays_order:
                week_schedule[day_name] = {
                    '–¥–∞—Ç–∞': dates.get(day_name, ''),
                    '–ø–∞—Ä—ã': []
                }
            
            # –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—ã
            for cell_id, content in schedule_scripts:
                # –ü–∞—Ä—Å–∏–º ID —è—á–µ–π–∫–∏: "4_1_group" -> –ø–∞—Ä–∞ 4, –¥–µ–Ω—å 1
                match = re.match(r'(\d+)_(\d+)_group', cell_id)
                if match:
                    lesson_number = match.group(1)
                    day_number = match.group(2)
                    
                    # –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Ä—ã
                    lesson_info = self.parse_lesson_content(content)
                    
                    if lesson_info:
                        day_name = self.weekdays.get(day_number, f'–î–µ–Ω—å {day_number}')
                        
                        if day_name in week_schedule:
                            week_schedule[day_name]['–ø–∞—Ä—ã'].append({
                                '–Ω–æ–º–µ—Ä_–ø–∞—Ä—ã': int(lesson_number),
                                '–≤—Ä–µ–º—è': self.time_slots.get(lesson_number, ''),
                                **lesson_info
                            })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            for day in week_schedule:
                week_schedule[day]['–ø–∞—Ä—ã'] = sorted(
                    week_schedule[day]['–ø–∞—Ä—ã'], 
                    key=lambda x: x['–Ω–æ–º–µ—Ä_–ø–∞—Ä—ã']
                )
            
            # –£–¥–∞–ª—è–µ–º –¥–Ω–∏ –±–µ–∑ –ø–∞—Ä
            week_schedule_filtered = OrderedDict()
            for day, data in week_schedule.items():
                if data['–ø–∞—Ä—ã']:
                    week_schedule_filtered[day] = data
            
            return week_schedule_filtered
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–µ–¥–µ–ª–∏ {week_number}: {e}")
            return {}
    
    def parse_lesson_content(self, content):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ –∏–∑ HTML"""
        try:
            # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            content = content.replace('\\/', '/')
            content = content.replace("\\'", "'")
            
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(f'<div>{content}</div>', 'html.parser')
            text = soup.get_text(separator='|', strip=True)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [p.strip() for p in text.split('|') if p.strip()]
            
            if len(parts) < 1:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
            subject_line = parts[0]
            match = re.match(r'(.+?)\s*\((.+?)\)', subject_line)
            
            if match:
                subject = match.group(1).strip()
                lesson_type = match.group(2).strip()
            else:
                subject = subject_line
                lesson_type = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é
            teacher = None
            classroom = None
            
            for part in parts[1:]:
                if '–ö–æ—Ä–ø—É—Å' in part:
                    classroom = part
                elif part and not part.startswith('–ö–æ—Ä–ø—É—Å') and len(part) > 2:
                    teacher = part
            
            return {
                '–ø—Ä–µ–¥–º–µ—Ç': subject,
                '—Ç–∏–ø': lesson_type,
                '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': teacher,
                '–∞—É–¥–∏—Ç–æ—Ä–∏—è': classroom
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞—Ä—ã: {e}")
            return None
    
    def parse_semester(self, group_id, group_name, start_week=1, end_week=18):
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —Å–µ–º–µ—Å—Ç—Ä"""
        print(f"\nüéì –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} (ID: {group_id})")
        print(f"üìä –ù–µ–¥–µ–ª–∏: —Å {start_week} –ø–æ {end_week}")
        print("="*70)
        
        full_schedule = {
            '–≥—Ä—É–ø–ø–∞': group_name,
            'group_id': group_id,
            '–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            '–Ω–µ–¥–µ–ª–∏': {}
        }
        
        successful_weeks = 0
        total_lessons = 0
        
        for week in range(start_week, end_week + 1):
            week_data = self.parse_week(group_id, week)
            if week_data:
                full_schedule['–Ω–µ–¥–µ–ª–∏'][str(week)] = week_data
                
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
                lessons_in_week = sum(len(day['–ø–∞—Ä—ã']) for day in week_data.values())
                total_lessons += lessons_in_week
                
                print(f"‚úÖ –ù–µ–¥–µ–ª—è {week} –≥–æ—Ç–æ–≤–∞: {len(week_data)} –¥–Ω–µ–π, {lessons_in_week} –ø–∞—Ä")
                successful_weeks += 1
            else:
                print(f"‚ö†Ô∏è –ù–µ–¥–µ–ª—è {week} –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print(f"‚ú® –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {group_name} –∑–∞–≤–µ—Ä—à—ë–Ω!")
        print(f"üìä –°–ø–∞—Ä—Å–µ–Ω–æ: {successful_weeks} –Ω–µ–¥–µ–ª—å, {total_lessons} –ø–∞—Ä")
        print("="*70)
        
        return full_schedule
    
    def save_to_json(self, schedule, filename='schedule_data.json'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(schedule, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filename}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False


def load_groups(filename='groups.json'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ JSON"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            groups = json.load(f)
            print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø –∏–∑ {filename}: {len(groups)}")
            return groups
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞—é —Å –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π...")
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        default_groups = [
            {'id': 10990, 'name': '–¢–û–ü-103–ë'}
        ]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(default_groups, f, ensure_ascii=False, indent=2)
        return default_groups
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        return [{'id': 10990, 'name': '–¢–û–ü-103–ë'}]


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = ScheduleParser()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    groups = load_groups('groups.json')
    
    print("\n" + "="*70)
    print("üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø –£–£–ù–∏–¢")
    print(f"üìä –ë—É–¥–µ—Ç —Å–ø–∞—Ä—Å–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}")
    print("="*70)
    
    all_schedules = {}
    successful = 0
    
    for i, group in enumerate(groups, 1):
        print(f"\n[{i}/{len(groups)}] –ü–∞—Ä—Å–∏–º –≥—Ä—É–ø–ø—É {group['name']}...")
        
        schedule = parser.parse_semester(
            group_id=group['id'],
            group_name=group['name'],
            start_week=1,
            end_week=18
        )
        
        if schedule and schedule.get('–Ω–µ–¥–µ–ª–∏'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –æ—Ç–¥–µ–ª—å–Ω–æ
            safe_name = group['name'].replace('/', '_').replace('\\', '_')
            filename = f"schedule_{safe_name}.json"
            parser.save_to_json(schedule, filename)
            
            all_schedules[group['name']] = schedule
            successful += 1
        else:
            print(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group['name']} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
    if all_schedules:
        with open('all_schedules.json', 'w', encoding='utf-8') as f:
            json.dump(all_schedules, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ all_schedules.json")
    
    print("\n" + "="*70)
    print("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–Å–ù!")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ: {successful}/{len(groups)} –≥—Ä—É–ø–ø")
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {successful + 1}")
    print("="*70 + "\n")


if __name__ == '__main__':
    main()